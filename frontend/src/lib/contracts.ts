// src/lib/contracts.ts
import { Contract } from 'ethers';
import { getProvider, getSigner } from './hedera';

// Import ABIs generated by Hardhat (copied into frontend/src/abi)
import EscrowAbi from '../abi/EscrowGame.json';
import OracleAbi from '../abi/OracleAdapter.json';
import CcipAbi from '../abi/CCIPReceiver.json';

const env = (k: string, d = '') => (import.meta as any)?.env?.[k] ?? d;

const CHAIN_ID_NUM = Number(env('VITE_CHAIN_ID', '296')); // default Hedera testnet

function resolveEnvAddress(key: string, chainId = CHAIN_ID_NUM): string {
  const chainKey = `${key}_${chainId}`;
  const chainVal = env(chainKey);
  if (chainVal) return chainVal as string;
  const generic = env(key);
  if (generic) return generic as string;
  throw new Error(`Missing address for ${key}. Set ${chainKey} or ${key} in .env`);
}

function addrOrEnv(userAddr: string | undefined, envKey: string): string {
  return (userAddr && userAddr !== '') ? userAddr : resolveEnvAddress(envKey);
}

/** Thin factory: returns on-demand read/write contract handles */
function factory(abi: any, defaultEnvKey: string) {
  return (address?: string) => {
    const resolved = addrOrEnv(address, defaultEnvKey);

    return {
      address: resolved,
      read(): Contract {
        const p = getProvider();
        return new Contract(resolved, abi, p);
      },
      async write(): Promise<Contract> {
        const s = await getSigner();
        return new Contract(resolved, abi, s);
      },
    };
  };
}

// Public helpers
export const escrow  = factory(EscrowAbi,  'VITE_ESCROW_GAME');
export const oracle  = factory(OracleAbi,  'VITE_ORACLE_ADAPTER');
export const ccip    = factory(CcipAbi,    'VITE_CCIP_RECEIVER');

// Optional: convenience singletons (only if you prefer quick imports)
// export const Escrow = escrow();
// export const Oracle = oracle();
// export const CCIP   = ccip();
